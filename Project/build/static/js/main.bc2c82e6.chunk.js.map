{"version":3,"sources":["data/data_displacement_compare.csv","data/data_gdp.csv","data/data_refugee.csv","utils/fetchCountries.js","components/App/App.hook.js","utils/fetchAndProcessRefugeeData.js","utils/fetchAndProcessDisplacementData.js","utils/fetchAndProcessGDPData.js","utils/tooltips.js","utils/formatNumber.js","components/BarChart/BarChart.hook.js","components/Legend/Legend.hook.js","components/Legend/Legend.jsx","components/BarChart/BarChart.jsx","components/TornadoChart/useTornadoChart.js","components/TornadoChart/TornadoChart.jsx","components/MapChart/MapChart.hook.js","utils/getEconomyBandByGDP.js","components/MapChart/MapChart.jsx","data/data_displacement_category.csv","components/SunBurstChart/SunBurstChart.hook.js","utils/fetchAndProcessDisplacementCategoryData.js","components/SunBurstChart/SunBurstChart.jsx","components/SelectedCountry/SelectedCountry.jsx","components/YearSelect/YearSelect.jsx","components/App/App.js","index.js"],"names":["a","json","countriesData","countries","feature","objects","useAppState","useState","selectedCountry","setSelectedCountry","selectedYear","setSelectedYear","refugeeData","setRefugeeData","displacementData","setDisplacementData","gdpData","setGdpData","setCountriesData","useEffect","csv","then","data","groupBy","country","groupByCountry","catch","error","console","year","groupByYear","fetchCountries","countryRefugeeData","selectedCountryRefugeeData","selectedCountryDisplacementData","selectedCountryBarChartData","Object","values","map","dataPoint","label","value","parseInt","total","sort","b","selectedCountryTornadoChartData","countryDisplacementData","processedData","disasterDataPint","disaster_displacement","conflictDataPoint","conflict_displacement","push","processDisplacementData","gdpDataByYear","showTooltip","evt","text","tooltipId","tooltip","document","getElementById","innerHTML","style","display","left","pageX","top","pageY","hideTooltip","formatNumber","format","formatNumberK","margin","width","height","useBarChart","length","select","remove","svg","append","attr","x","scaleBand","range","padding","y","scaleLinear","domain","d","max","selectAll","enter","bandwidth","on","event","call","axisBottom","yAxis","axisLeft","tickFormat","renderBarChart","useLegend","id","items","forEach","item","i","color","renderLegendItem","renderLegend","Legend","className","legendItems","BarChart","position","useTornadoChart","chart","rangeRound","xAxis","scale","ticks","tickSize","selection","each","extent","nice","minValues","Math","min","apply","o","tickPadding","abs","tooltipLabel","tornadoChart","datum","TornadoChart","getCountryLatestGDP","properties","name","gdp","renderMap","projection","geoMercator","translate","path","geoPath","g","colorScale","scaleOrdinal","schemeSpectral","features","countryEconomy","parsedGDP","round","getEconomyBandByGDP","_","countryGDP","MapChart","isEmpty","useMapChart","renderSunBurstChart","maxRadius","PI","clamp","scaleSqrt","schemeCategory10","partition","d3Partition","arc","d3Arc","startAngle","x0","endAngle","x1","innerRadius","y0","outerRadius","y1","middleArcLine","halfPi","angles","r","middleAngle","invertDirection","reverse","d3Path","toString","textFits","deltaAngle","perimeter","focusOn","transition","duration","tween","xd","interpolate","yd","t","moveStackToFront","elD","filter","this","parentNode","appendChild","parent","attrTween","displacementCategoryData","groupByHazardCategory","hazard_category","groupByHazardType","hazard_type","dataGroupedByHazardCategory","children","keys","key","category","dataGroupedByHazardType","hazardTypes","type","dataGroupedByCountry","hazardCountriesByYear","dataItem","size","new_displacements","root","hierarchy","sum","slice","descendants","exit","newSlice","stopPropagation","SunBurstChart","SelectedCountry","countryName","yearOptions","useStyles","makeStyles","createStyles","formControl","minWidth","YearSelect","classes","FormControl","InputLabel","Select","labelId","onChange","target","MenuItem","spectral","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bc2c82e6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/data_displacement_compare.6efee98a.csv\";","export default __webpack_public_path__ + \"static/media/data_gdp.ebea6884.csv\";","export default __webpack_public_path__ + \"static/media/data_refugee.037bf479.csv\";","import { json } from 'd3';\nimport { feature } from 'topojson';\n\n\nexport async function fetchCountries() {\n    const countriesData = await json('/countries-110m.json')\n    const countries = feature(countriesData, countriesData.objects.countries);\n    return countries;\n}","import { useState, useEffect } from 'react';\nimport { fetchAndProcessDisplacementData } from '../../utils/fetchAndProcessDisplacementData';\nimport { fetchAndProcessGDPData } from '../../utils/fetchAndProcessGDPData';\nimport { fetchAndProcessRefugeeData } from '../../utils/fetchAndProcessRefugeeData';\nimport { fetchCountries } from '../../utils/fetchCountries';\n\nconst processRefugeeData = (countryRefugeeData) => {\n    return Object.values(countryRefugeeData).map(dataPoint => ({\n        label: dataPoint.year,\n        value: parseInt(dataPoint.total)\n    })).sort((a, b) => {\n        return parseInt(a.label) - parseInt(b.label);\n    });\n}\n\nconst processDisplacementData = (countryDisplacementData) => {\n    const processedData = [];\n    for(let data of countryDisplacementData) {\n        const disasterDataPint = {\n            label: data.year,\n            value: parseInt(data.disaster_displacement)\n        }\n        const conflictDataPoint = {\n            label: data.year,\n            value: -parseInt(data.conflict_displacement)\n        }\n        processedData.push(disasterDataPint);\n        processedData.push(conflictDataPoint);\n    }\n    return processedData;\n}\n\nexport const useAppState = () => {\n    const [selectedCountry, setSelectedCountry] = useState('Portugal');\n    const [selectedYear, setSelectedYear] = useState(2019);\n    const [refugeeData, setRefugeeData] = useState({});\n    const [displacementData, setDisplacementData] = useState({});\n    const [gdpData,setGdpData] = useState({});\n    const [countriesData, setCountriesData] = useState([]);\n    useEffect(() => {\n        fetchAndProcessRefugeeData().then(refugeeData => setRefugeeData(refugeeData));\n        fetchAndProcessDisplacementData().then(displacementData => setDisplacementData(displacementData));\n        fetchAndProcessGDPData().then(gdpData => setGdpData(gdpData));\n        fetchCountries().then(countriesData => setCountriesData(countriesData));\n    }, []);\n    const selectedCountryRefugeeData = refugeeData[selectedCountry] || {};\n    const selectedCountryDisplacementData = displacementData[selectedCountry] || [];\n    const selectedCountryBarChartData = processRefugeeData(selectedCountryRefugeeData);\n    const selectedCountryTornadoChartData = processDisplacementData(selectedCountryDisplacementData);\n    const gdpDataByYear = gdpData[selectedYear] || [];\n    return {\n        selectedCountry,\n        setSelectedCountry,\n        selectedYear,\n        setSelectedYear,\n        selectedCountryBarChartData,\n        selectedCountryTornadoChartData,\n        countriesData,\n        gdpDataByYear\n    }\n}","import { csv } from 'd3';\nimport { groupBy } from 'ramda';\nimport refugeeData from '../data/data_refugee.csv';\n\nexport const fetchAndProcessRefugeeData = () => {\n    return csv(refugeeData).then(data => {\n      const groupByCountry = groupBy(({ country }) => country);\n      return groupByCountry(data);\n    }).catch(error => {\n       console.error(`Failed to load refugee data`, error);\n       return {};\n    });\n}","import { csv } from 'd3';\nimport { groupBy } from 'ramda';\nimport displacementData from '../data/data_displacement_compare.csv'\n\nexport const fetchAndProcessDisplacementData = () => {\n    return csv(displacementData).then(data => {\n        const groupByCountry = groupBy(({ country }) => country);\n        return groupByCountry(data);\n    }).catch(error => {\n        console.error(`Failed to load displacement data`, error);\n        return {};\n    })\n}","import { csv } from 'd3';\nimport { groupBy } from 'ramda';\nimport gdpData from '../data/data_gdp.csv';\n\nexport const fetchAndProcessGDPData = (selectedYear) => {\n    return csv(gdpData).then(data => {\n        const groupByYear = groupBy(({ year }) => year);\n        return groupByYear(data);\n        // return data.filter(dataPoint => parseInt(dataPoint.year) === selectedYear);\n    }).catch(error => {\n        console.error(`Failed to load GDP data`, error);\n        return {};\n    });\n}","export function showTooltip(evt, text, tooltipId) {\n    let tooltip = document.getElementById(tooltipId);\n    tooltip.innerHTML = text;\n    tooltip.style.display = \"block\";\n    tooltip.style.left = evt.pageX + 10 + 'px';\n    tooltip.style.top = evt.pageY + 10 + 'px';\n}\n  \nexport function hideTooltip(tooltipId) {\n    var tooltip = document.getElementById(tooltipId);\n    tooltip.style.display = \"none\";\n}","import { format } from 'd3';\n\nexport const formatNumber = format(',d');\nexport const formatNumberK = format(\"~s\");","import { useEffect } from 'react';\nimport { select, scaleLinear, axisLeft, scaleBand, axisBottom, max } from 'd3';\nimport { showTooltip, hideTooltip } from '../../utils/tooltips';\nimport { formatNumber, formatNumberK } from '../../utils/formatNumber';\n\nconst margin = { top: 40, right: 40, bottom: 40, left: 40 };\nconst width = 400 - margin.left - margin.right;\nconst height = 400 - margin.top - margin.bottom;\n\nfunction renderBarChart(data) {\n\n    select(\"#barChart\").remove();\n\n    // Select the svg object\n    // append a 'group' element to 'svg'\n    // moves the 'group' element to the top left margin\n    const svg = select(\".barChartWidgetWrapper\").append('svg')\n      .attr('id', 'barChart')\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // set the ranges\n    const x = scaleBand().range([0, width]).padding(0.1);\n\n    const y = scaleLinear().range([height, 0]);\n\n    // Scale the range of the data in the domains\n    x.domain(data.map( (d) => d.label));\n    y.domain([0, max(data, (d) => d.value)]);\n\n    // Append the rectangles for the bar chart\n    svg.selectAll(\".bar\")\n      .data(data)\n      .enter().append(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", (d) =>   x(d.label))\n        .attr(\"width\", x.bandwidth())\n        .attr(\"y\", (d) => y(d.value))\n        .attr(\"height\", (d) =>  height - y(d.value))\n        .on('mousemove', (event, dataPoint) => {\n          const tooltipText = `Number of Outgoing Refugees (in ${dataPoint.label}): ${formatNumber(dataPoint.value)}`\n          return showTooltip(event, tooltipText, \"barChartTooltip\")\n        })\n        .on('mouseout', () => hideTooltip(\"barChartTooltip\"))\n\n    // Add the x Axis\n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(axisBottom(x));\n\n    const yAxis = axisLeft(y);\n    yAxis.tickFormat((value) => formatNumberK(value));\n\n    // Add the y Axis\n    svg.append(\"g\").call(yAxis);\n}\n\nexport const useBarChart = ({ data }) => {\n  useEffect(() => {\n    if(data && data.length) {\n      renderBarChart(data);\n    }\n  }, [data]);\n};\n","import { useEffect } from \"react\"\nimport { select } from 'd3';\n\n\nconst renderLegendItem = (svg, item, i) => {\n    svg.append(\"circle\").attr(\"cx\",100).attr(\"cy\",30 * (i + 1)).attr(\"r\", 6).style(\"fill\", item.color);\n    svg.append(\"text\").attr(\"x\", 120).attr(\"y\", (30 * (i + 1))).text(item.label).style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\");\n}\n\n\nconst renderLegend = ({ id, items }) => {\n    const svg = select(`#${id}`);\n    items.forEach((item, i) => {\n      renderLegendItem(svg, item, i);\n    })\n    // svg.append(\"circle\").attr(\"cx\",100).attr(\"cy\",30).attr(\"r\", 6).style(\"fill\", \"#69b3a2\")\n    // svg.append(\"circle\").attr(\"cx\",100).attr(\"cy\",60).attr(\"r\", 6).style(\"fill\", \"#404080\")\n    // svg.append(\"text\").attr(\"x\", 120).attr(\"y\", 30).text(\"variable A\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\n    // svg.append(\"text\").attr(\"x\", 120).attr(\"y\", 60).text(\"variable B\").style(\"font-size\", \"15px\").attr(\"alignment-baseline\",\"middle\")\n}\n\nexport const useLegend = ({ id, items }) => {\n    useEffect(() => {\n        renderLegend({ id, items });\n    },[id, items]);\n}","import { useLegend } from \"./Legend.hook\";\n\nexport const Legend = ({ id, items = [] }) => {\n    useLegend({ id, items });\n    return (\n        <div className=\"legendWrapper\">\n            <svg id={id} width={500} height={50 + (25 * items.length)}/>\n        </div>\n    );\n}","import { useBarChart } from './BarChart.hook';\nimport { Legend } from '../Legend/Legend'\n\n\nconst legendItems = [\n    {\n      label: 'Number of Outgoing Refugees (Per Year)',\n      color: 'var(--blue1)'\n    }\n];\n\nexport const BarChart = ({ data = [] }) => {\n    useBarChart({ data });\n    if(data.length) {\n      return (\n        <div className=\"widgetWithLegend\">\n          <div className=\"barChartWidgetWrapper\">\n              <div id=\"barChartTooltip\" display=\"none\" style={{\n                    position: 'absolute',\n                    display: 'none'\n                }} />\n          </div>\n          <Legend id=\"barChartLegend\" items={legendItems} />\n        </div>\n      );\n    } \n    return (\n      <div className=\"emptyPlaceholder\">\n        <p>No data found for this country</p>\n      </div>\n    );\n}","import { scaleLinear, scaleBand, axisBottom, axisLeft, select, extent } from 'd3';\nimport { useEffect } from 'react';\nimport { showTooltip, hideTooltip } from '../../utils/tooltips';\nimport { formatNumber, formatNumberK } from '../../utils/formatNumber';\n\nconst margin = { top: 40, right: 40, bottom: 40, left: 40 };\nconst width = 400 - margin.left - margin.right;\nconst height = 400 - margin.top - margin.bottom;\n\n\nfunction tornadoChart() {\n\n    select(\"#tornadoChart\").remove();\n\n    const x = scaleLinear()\n        .range([0, width]);\n  \n    const y = scaleBand()\n        .rangeRound([0, height])\n        .padding(0.1)\n  \n    const xAxis = axisBottom()\n        .scale(x)\n        .ticks(7)\n  \n    const yAxis = axisLeft()\n        .scale(y)\n        .tickSize(0)\n  \n    const svg = select(\".tornadoChartWidgetWrapper\").append(\"svg\")\n        .attr('id', 'tornadoChart')\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n  \n    function renderTornadoChart(selection) {\n      selection.each(function(data) {\n        \n        x.domain(extent(data, d => d.value)).nice();\n        y.domain(data.map(d => d.label));\n  \n        const minValues = Math.min.apply(Math, data.map(function(o){return o.value;}))\n        \n        yAxis.tickPadding(Math.abs(x(minValues) - x(0)) + 10);\n        xAxis.tickFormat((value) => formatNumberK(Math.abs(value)));\n  \n        const bar = svg.selectAll(\".tornadoBar\").data(data)\n  \n        bar.enter().append(\"rect\")\n            .attr(\"class\", d => \"tornadoBar --tornadoBar-\" + (d.value < 0 ? \"negative\" : \"positive\"))\n            .attr(\"x\", d => x(Math.min(0, d.value)))\n            .attr(\"y\", d => y(d.label))\n            .attr(\"width\", d => Math.abs(x(d.value) - x(0)))\n            .attr(\"height\", y.bandwidth())\n            .on('mousemove', (event, dataPoint) => {\n                const tooltipLabel = dataPoint.value < 0 ? \"Number of Conflict Displacements\" : \"Number of Disaster Displacements\"\n                const tooltipText = `${tooltipLabel} (in ${dataPoint.label}): ${formatNumber(Math.abs(dataPoint.value))}`\n                return showTooltip(event, tooltipText, \"barChartTooltip\")\n              })\n            .on('mouseout', () => hideTooltip(\"barChartTooltip\"))\n            \n  \n        // bar.enter().append('text')\n        //     .attr(\"text-anchor\", \"middle\")\n        //     .attr(\"x\", (d,i) => x(Math.min(0, d.value)) + (Math.abs(x(d.value) - x(0)) / 2))\n        //     .attr(\"y\", (d, i) => y(d.label) + (y.bandwidth() / 2))\n        //     .attr(\"dy\", \".35em\")\n        //     .text((d) => Math.abs(d.value))\n  \n        svg.append(\"g\")\n            .attr(\"class\", \"x axis\")\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\n            .call(xAxis);\n  \n        svg.append(\"g\")\n            .attr(\"class\", \"y axis\")\n            .attr(\"transform\", \"translate(\" + x(0) + \",0)\")\n            .call(yAxis);\n      });\n    }\n  \n    return renderTornadoChart;\n}\n\n\nexport const useTornadoChart = ({ data }) => {\n    useEffect(() => {\n        if(data && data.length) {\n            const chart = tornadoChart();\n            select(\".tornadoChartWidgetWrapper\")\n                .datum(data)\n                .call(chart);\n        }\n    },[data]);\n}","import { useTornadoChart } from './useTornadoChart';\nimport { Legend } from '../Legend/Legend';\n\nconst legendItems = [\n    {\n      label: 'Number of Conflict Displacements (Per Year)',\n      color: 'var(--blue4)'\n    },\n    {\n        label: 'Number of Disaster Displacements (Per Year)',\n        color: 'var(--blue3)'\n    }\n];\n\nexport const TornadoChart = ({ data = [] }) => {\n    useTornadoChart({ data });\n    if (data.length) {\n        return (\n            <div className=\"widgetWithLegend\">\n                <div className=\"tornadoChartWidgetWrapper\">\n                    <div id=\"tornadoChartTooltip\" display=\"none\" style={{\n                        position: 'absolute',\n                        display: 'none'\n                    }} />\n                </div>\n                <Legend id=\"tornadoChartLegend\" items={legendItems} />\n            </div>\n        );\n    }\n    return (\n        <div className=\"emptyPlaceholder\">\n            <p>No data found for this country</p>\n        </div>\n    );\n}","import { useEffect } from \"react\";\nimport { select, geoPath, geoMercator, scaleOrdinal, schemeSpectral } from 'd3';\nimport { getEconomyBandByGDP } from '../../utils/getEconomyBandByGDP';\nimport { groupBy, isEmpty } from \"ramda\";\nimport { showTooltip, hideTooltip } from '../../utils/tooltips';\nimport { formatNumber } from '../../utils/formatNumber';\n\nconst width = 600;\nconst height = 400;\n\nfunction getCountryLatestGDP(gdpData, country) {\n    const groupByCountry = groupBy(({ country }) => country);\n    const gdpDataByCountry = groupByCountry(gdpData);\n    const countryName = country.properties.name;\n    const countryGDPYears = gdpDataByCountry[countryName] || [];\n    const countryGDPYear = countryGDPYears[0] || { gdp: '' };\n    const countryGDP = countryGDPYear.gdp;\n    return countryGDP;\n} \n\n\nfunction renderMap({\n    setSelectedCountry,\n    countries,\n    gdpData,\n    selectedYear\n}) {\n    const svg = select('#map').attr('width', width).attr('height', height);\n    const projection = geoMercator().scale(80).translate([width / 2, height / 1.4]);\n    const path = geoPath(projection);\n    const g = svg.append('g');\n    const colorScale = scaleOrdinal([\n        ...schemeSpectral[4],\n        'var(--darkGrey)'\n    ]);\n    colorScale.domain(['Low Income', 'Middle Income', 'Upper Middle Income', 'High Income', 'Unknown'])\n    g.selectAll('path').data(countries.features).enter().append('path')\n                        .attr('class', 'country')\n                        .attr('d', path)\n                        .attr('fill', (country) => {\n                            const countryGDP = getCountryLatestGDP(gdpData, country);\n                            const countryEconomy = getEconomyBandByGDP(countryGDP);\n                            return colorScale(countryEconomy);\n                        })\n                        .on('click', (_, country) => {\n                            setSelectedCountry(country.properties.name)\n                        })\n                        .on('mousemove', (event, country) => {\n                            const countryGDP = getCountryLatestGDP(gdpData, country);\n                            const tooltipText = `${country.properties.name} — GDP (${selectedYear}): ${!!countryGDP ? `$${formatNumber(Math.round(parseInt(countryGDP)))}` : 'Unknown'}`\n                            return showTooltip(event, tooltipText, \"mapChartTooltip\")\n                        })\n                        .on('mouseout', () => hideTooltip(\"mapChartTooltip\"))\n}\n\nexport const useMapChart = ({ countries, gdpData, selectedYear, setSelectedCountry }) => {\n    useEffect(() => {\n        if(!isEmpty(countries) && gdpData.length) {\n            renderMap({\n                countries,\n                gdpData,\n                setSelectedCountry,\n                selectedYear\n            });\n        }\n    }, [countries, gdpData, setSelectedCountry, selectedYear]);\n}","export const getEconomyBandByGDP = (gdp) => {\n    const parsedGDP = Math.round(parseInt(gdp));\n    if(parsedGDP < 1026) {\n        return 'Low Income'\n    } else if(1026 < parsedGDP && parsedGDP < 3995) {\n        return \"Middle Income\"\n    } else if(3995 < parsedGDP && parsedGDP < 12375) {\n        return \"Upper Middle Income\"\n    } else if(parsedGDP) {\n        return \"High Income\";\n    } else {\n        return \"Unknown\";\n    }\n}","import { useMapChart } from \"./MapChart.hook\";\n\nexport const MapChart = ({ selectedYear, setSelectedCountry, gdpData, countries }) => {\n    useMapChart({ selectedYear, setSelectedCountry, gdpData, countries });\n    return (\n        <div className=\"widgetWithLegend\">\n            <div className=\"mapWidgetWrapper\">\n                <div id=\"mapChartTooltip\" display=\"none\" style={{\n                    position: 'absolute',\n                    display: 'none'\n                }} />\n                <svg id=\"map\"/>\n            </div>\n        </div>\n    );\n}","export default __webpack_public_path__ + \"static/media/data_displacement_category.68e32f18.csv\";","\nimport { hierarchy, select, scaleLinear, scaleSqrt, scaleOrdinal, schemeCategory10, partition as d3Partition, arc as d3Arc, path as d3Path, interpolate } from 'd3';\nimport { useEffect } from \"react\"\nimport { fetchAndProcessDisplacementCategoryData } from '../../utils/fetchAndProcessDisplacementCategoryData';\nimport { showTooltip, hideTooltip } from '../../utils/tooltips';\nimport { formatNumber } from '../../utils/formatNumber';\n\nconst width = 360;\nconst height = 360;\n\nfunction renderSunBurstChart() {\n\n    const maxRadius = (Math.min(width, height) / 2) - 5;\n\n    const x = scaleLinear()\n                .range([0, 2 * Math.PI])\n                .clamp(true);\n\n    const y = scaleSqrt()\n                 .range([maxRadius*.1, maxRadius]);\n\n    const color = scaleOrdinal(schemeCategory10);\n\n    const partition = d3Partition();\n\n    const arc = d3Arc()\n        .startAngle(d => x(d.x0))\n        .endAngle(d => x(d.x1))\n        .innerRadius(d => Math.max(0, y(d.y0)))\n        .outerRadius(d => Math.max(0, y(d.y1)));\n\n    const middleArcLine = d => {\n        const halfPi = Math.PI/2;\n        const angles = [x(d.x0) - halfPi, x(d.x1) - halfPi];\n        const r = Math.max(0, (y(d.y0) + y(d.y1)) / 2);\n\n        const middleAngle = (angles[1] + angles[0]) / 2;\n        const invertDirection = middleAngle > 0 && middleAngle < Math.PI; // On lower quadrants write text ccw\n        if (invertDirection) { angles.reverse(); }\n\n        const path = d3Path();\n        path.arc(0, 0, r, angles[0], angles[1], invertDirection);\n        return path.toString();\n    };\n\n    const textFits = d => {\n        const CHAR_SPACE = 6;\n\n        const deltaAngle = x(d.x1) - x(d.x0);\n        const r = Math.max(0, (y(d.y0) + y(d.y1)) / 2);\n        const perimeter = r * deltaAngle;\n\n        return d.data.name.length * CHAR_SPACE < perimeter;\n    };\n\n    const svg = select('.sunBurstChartWidgetWrapper').append('svg')\n    .style('width', width)\n    .style('height', height)\n    .attr('viewBox', `${-width / 2} ${-height / 2} ${width} ${height}`)\n    .on('click', () => focusOn()); // Reset zoom on canvas click\n\n    fetchAndProcessDisplacementCategoryData().then(root => {\n         \n        root = hierarchy(root);\n        root.sum(d => d.size);\n\n\n        const slice = svg.selectAll('g.slice')\n            .data(partition(root).descendants());\n\n        slice.exit().remove();\n\n        const newSlice = slice.enter()\n            .append('g').attr('class', 'slice')\n            .on('click', (event, d) => {\n                event.stopPropagation();\n                focusOn(d);\n            });\n\n        newSlice.append('path')\n            .attr('class', 'main-arc')\n            .style('fill', d => color((d.children ? d : d.parent).data.name))\n            .attr('d', arc)\n            .on('mousemove', (event, d) => {\n                const tooltipText = `${d.data.name}: ${formatNumber(d.value)}`\n                return showTooltip(event, tooltipText, \"sunBurstChartTooltip\")\n            })\n            .on('mouseout', () => hideTooltip(\"sunBurstChartTooltip\"))\n\n        newSlice.append('path')\n            .attr('class', 'hidden-arc')\n            .attr('id', (_, i) => `hiddenArc${i}`)\n            .attr('d', middleArcLine);\n\n        const text = newSlice.append('text')\n            .attr('display', d => textFits(d) ? null : 'none');\n\n        text.append('textPath')\n            .attr('startOffset','50%')\n            .attr('xlink:href', (_, i) => `#hiddenArc${i}` )\n            .text(d => d.data.name);\n    }).catch(error => {\n        throw error;\n    });\n\n\n    function focusOn(d = { x0: 0, x1: 1, y0: 0, y1: 1 }) {\n        // Reset to top-level if no data point specified\n\n        const transition = svg.transition()\n            .duration(750)\n            .tween('scale', () => {\n                const xd = interpolate(x.domain(), [d.x0, d.x1]),\n                    yd = interpolate(y.domain(), [d.y0, 1]);\n                return t => { x.domain(xd(t)); y.domain(yd(t)); };\n            });\n\n        transition.selectAll('path.main-arc')\n            .attrTween('d', d => () => arc(d));\n\n        transition.selectAll('path.hidden-arc')\n            .attrTween('d', d => () => middleArcLine(d));\n\n        transition.selectAll('text')\n            .attrTween('display', d => () => textFits(d) ? null : 'none');\n\n        moveStackToFront(d);\n\n        function moveStackToFront(elD) {\n            svg.selectAll('.slice').filter(d => d === elD)\n                .each(function(d) {\n                    this.parentNode.appendChild(this);\n                    if (d.parent) { moveStackToFront(d.parent); }\n                })\n        }\n    }\n\n}\n\nexport const useSunBurstChart = () => {\n    useEffect(() => {\n        renderSunBurstChart();\n    },[]);\n}","import { csv } from 'd3';\nimport { groupBy } from 'ramda';\nimport displacementCategoryData from '../data/data_displacement_category.csv';\n\nexport const fetchAndProcessDisplacementCategoryData = () => {\n    return csv(displacementCategoryData).then(data => {\n        const groupByCountry = groupBy(({ country }) => country);\n        const groupByHazardCategory = groupBy(({ hazard_category }) => hazard_category);\n        const groupByHazardType = groupBy(({ hazard_type }) => hazard_type);\n        \n        const dataGroupedByHazardCategory = groupByHazardCategory(data);\n        const hazardCategories = Object.keys(dataGroupedByHazardCategory).map(key => ({\n            name: key,\n            children: dataGroupedByHazardCategory[key]\n        }))\n        \n        const hazardCategoriesTypes = hazardCategories.map(category => {\n            const dataGroupedByHazardType = groupByHazardType(category.children);\n            const hazardTypes = Object.keys(dataGroupedByHazardType).map(key => ({\n                name: key,\n                children: dataGroupedByHazardType[key]\n            }))\n            return {\n                ...category,\n                children: hazardTypes\n            }\n        });\n\n        const processedData = hazardCategoriesTypes.map(category => {\n            return {\n                ...category,\n                children: category.children.map(type => {\n                    const dataGroupedByCountry = groupByCountry(type.children);\n                    const hazardCountries = Object.keys(dataGroupedByCountry).map(key => ({\n                        name: key,\n                        children: dataGroupedByCountry[key]\n                    }))\n                    const hazardCountriesByYear = hazardCountries.map(country => ({\n                        ...country,\n                        children: country.children.map(dataItem => ({\n                            name: dataItem.year,\n                            size: parseInt(dataItem.new_displacements)\n                        }))\n                    }))\n                    return {\n                        ...type,\n                        children: hazardCountriesByYear\n                    }\n                })\n            }\n        })\n\n        return {\n            name: 'Displacement Category',\n            children: processedData,\n        };\n    }).catch(error => {\n        console.error(`Failed to load displacement data`, error);\n        return {};\n    })\n}","import { useSunBurstChart } from \"./SunBurstChart.hook\"\n\nexport const SunBurstChart = () => {\n    useSunBurstChart();\n    return (\n        <div className=\"widgetWithLegend\">\n            <div className=\"sunBurstChartWidgetWrapper\">\n                <div id=\"sunBurstChartTooltip\" display=\"none\" style={{\n                            position: 'absolute',\n                            display: 'none'\n                }} />\n            </div>\n        </div>\n\n    );\n}","export const SelectedCountry = ({ countryName }) => {\n    return (\n        <h4>Selected Country: {countryName}</h4>\n    );\n}","import InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\n\n\nconst yearOptions = [\n    {\n        value: 2019,\n        label: \"2019\"\n    },\n    {\n        value: 2018,\n        label: \"2018\"\n    },\n    {\n        value: 2017,\n        label: \"2017\"\n    },\n    {\n        value: 2016,\n        label: \"2016\"\n    },\n    {\n        value: 2015,\n        label: \"2015\"\n    },\n    {\n        value: 2014,\n        label: \"2014\"\n    },\n    {\n        value: 2013,\n        label: \"2013\"\n    },\n    {\n        value: 2012,\n        label: \"2012\"\n    },\n    {\n        value: 2011,\n        label: \"2011\"\n    },\n    {\n        value: 2010,\n        label: \"2010\"\n    },\n    {\n        value: 2009,\n        label: \"2009\"\n    }\n];\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    formControl: {\n      minWidth: 120,\n    },\n  }),\n);\n\nexport const YearSelect = ({ selectedYear, setSelectedYear }) => {\n\n    const classes = useStyles();\n\n    const handleChange = (event) => setSelectedYear(event.target.value);\n\n    return (\n        <FormControl className={classes.formControl}>\n            <InputLabel id=\"year-select-label\">Year</InputLabel>\n            <Select\n                labelId=\"year-select-label\"\n                id=\"year-select\"\n                value={selectedYear}\n                onChange={handleChange}\n            >\n                {yearOptions.map(({ value, label }) => <MenuItem key={value} value={value}>{label}</MenuItem>)}\n            </Select>\n        </FormControl>\n    );\n}","import { useAppState } from './App.hook';\nimport { BarChart } from '../BarChart/BarChart';\nimport { TornadoChart } from '../TornadoChart/TornadoChart'\nimport { MapChart } from '../MapChart/MapChart';\nimport { SunBurstChart } from '../SunBurstChart/SunBurstChart';\nimport { SelectedCountry } from '../SelectedCountry/SelectedCountry';\nimport { YearSelect } from '../YearSelect/YearSelect';\nimport { Legend } from '../Legend/Legend';\nimport { schemeSpectral } from 'd3';\n\nconst spectral = schemeSpectral[4];\n\nconst legendItems = [\n    {\n      label: 'High Income',\n      color: spectral[3]\n    },\n    {\n        label: 'Middle High Income',\n        color: spectral[2]\n    },\n    {\n        label: 'Middle Income',\n        color: spectral[1]\n    },\n    {\n        label: 'Low Income',\n        color: spectral[0]\n    },\n    {\n        label: 'Unknown',\n        color: 'var(--darkGrey)'\n    }\n];\n\nfunction App() {\n   const { \n    selectedCountryBarChartData, \n    selectedCountryTornadoChartData, \n    setSelectedCountry, \n    selectedCountry, \n    selectedYear,\n    setSelectedYear,\n    countriesData,\n    gdpDataByYear\n  } = useAppState();\n  return (\n    <div className=\"rootWrapper\">\n      <div className=\"upperWidgetsWrapper\">\n        <div className=\"headerWrapper\">\n          <div className=\"controlsWrapper\">\n            <SelectedCountry countryName={selectedCountry} />\n            <YearSelect selectedYear={selectedYear} setSelectedYear={setSelectedYear} />\n          </div>\n          <div className=\"mapLegendWrapper\"> \n            <Legend id=\"mapChartWidget\" items={legendItems} />\n          </div>\n        </div>\n        <MapChart setSelectedCountry={setSelectedCountry} selectedYear={selectedYear} countries={countriesData} gdpData={gdpDataByYear} />\n      </div>\n      <div className=\"lowerWidgetsWrapper\">\n        <BarChart data={selectedCountryBarChartData} />\n        <TornadoChart data={selectedCountryTornadoChartData} />\n        <SunBurstChart />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}